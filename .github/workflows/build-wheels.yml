# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Build wheels

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 0 * * 0' # weekly

env:
  REPO_DIR: dipy
  PKG_NAME: dipy
  BUILD_COMMIT: 1.2.0
  PLAT: x86_64
  UNICODE_WIDTH: 32
  NP_BUILD_DEP: "numpy==1.9"
  NP_TEST_DEP: "numpy==1.9"
  # Pin scipy dependency for compatibility with older numpy.
  SCIPY_DEP: "scipy==1.0"
  WHEELHOUSE_UPLOADER_USERNAME: travis-worker
  # Following generated with
  # travis encrypt -r MacPython/dipy-wheels WHEELHOUSE_UPLOADER_SECRET=<the api key>
  WHEELHOUSE_UPLOADER_SECRET: "MSGVzUmPDQNUQCT8N/a07IPB0OzKc17lL615Z3srNRs37D1THRCSe5iaPj9PDkc8y2LGuY516bBFLU3xE2aqRP6NsXX9dQ9ynYaZxbGQnZijGR5mjj7SUEugW8Tyu0TXXr/0BYWq8QADgQAvPXfAIhK8FoE+w7UCi3zWU982IOk="
  TRAVIS_REPO_SLUG: ${{ github.repository }}
  TRAVIS_BRANCH: ${{ github.head_ref }}
  TRAVIS_PULL_REQUEST: ${{ github.event.number }}
  TRAVIS_BUILD_DIR: ${{ github.workspace }}

jobs:
  build:

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8]
        os: [ubuntu-latest, macos-latest] #, windows-latest]
        platform: [x32, x64]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Environment variable
      env:
        MB_PYTHON_VERSION: ${{ matrix.python-version }}
        TRAVIS_PYTHON_VERSION: ${{ matrix.python-version }}
        PLAT: ${{ matrix.platform }}
        TRAVIS_OS_NAME: ${{ matrix.os }}
        SCIPY_DEP: scipy
      run: |
        echo "::set-env name=PLAT::$(if [ "x32" == "${{ matrix.platform }}" ]; then echo "i686"; else echo "x86_64"; fi)"
        echo "::set-env name=TRAVIS_OS_NAME::$(if [ "macos-latest" == "${{ matrix.os }}" ]; then echo "osx"; else echo "${{ matrix.os }}"; fi)"
        echo "::set-env name=TRAVIS_BRANCH::${TRAVIS_BRANCH:-$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')}"
        echo "::set-env name=TRAVIS_EVENT_TYPE::$(if [ "schedule" == "${{ github.event_name }}" ]; then echo "cron"; else echo "${{ github.event_name }}"; fi)"
        if [ "$MB_PYTHON_VERSION" == '3.6' ]; then
          echo ::set-env name=NP_BUILD_DEP::1.13.3
          echo ::set-env name=NP_TEST_DEP::1.13.3
        elif [ "$MB_PYTHON_VERSION" == '3.7' ]; then
          echo ::set-env name=NP_BUILD_DEP::1.14.5
          echo ::set-env name=NP_TEST_DEP::1.13.3
        elif [ "$MB_PYTHON_VERSION" == '3.8' ]; then
          echo ::set-env name=NP_BUILD_DEP::1.17.3
          echo ::set-env name=NP_TEST_DEP::1.13.3
        else
          echo "None of the defined python version, use default"
        fi
    # - name: Print some Environment variable
    #   run: |
    #     echo "TRAVIS_BRANCH: ${TRAVIS_BRANCH}"
    #     echo "TRAVIS_PULL_REQUEST: ${TRAVIS_PULL_REQUEST}"
    #     echo "TRAVIS_REPO_SLUG: ${TRAVIS_REPO_SLUG}"
    #     echo "TRAVIS_EVENT_TYPE: ${TRAVIS_EVENT_TYPE}"
    #     echo "NP_BUILD_DEP: ${NP_BUILD_DEP}"
    #     echo "NP_TEST_DEP: ${NP_TEST_DEP}"
    - name: Install VirtualEnv
      run: |
        python -m pip install --upgrade pip
        pip install virtualenv
    # - name: Setup Multibuild
    - name: Build and Install Wheels
      env:
        BUILD_DEPENDS: "$NP_BUILD_DEP Cython nibabel"
        TEST_DEPENDS: "$NP_TEST_DEP nose pytest nibabel $SCIPY_DEP"
      run: |
        source multibuild/common_utils.sh
        source multibuild/travis_steps.sh
        before_install
        clean_code $REPO_DIR $BUILD_COMMIT
        build_wheel $REPO_DIR $PLAT
        install_run $PLAT
    # - name: Build Wheels
    #   run: |
    #     # Maybe get and clean and patch source
    #     clean_code $REPO_DIR $BUILD_COMMIT
    #     build_wheel $REPO_DIR $PLAT
    # - name: Install Wheel
    #   run: |
    #     install_run $PLAT
    - name: After success
      if: success()
      run: |
        # trigger an upload to the shared ecosystem
        # infrastructure at: https://anaconda.org/scipy-wheels-nightly
        # for cron jobs only (restricted to master branch once
        # per week)
        # SCIPY_WHEELS_NIGHTLY_ACCESS is a secret token
        # used in Travis CI config, originally
        # generated at anaconda.org for scipy-wheels-nightly
        if [ "$TRAVIS_EVENT_TYPE" == "cron" ]; then
              source extra_functions.sh;
              for f in wheelhouse/*.whl; do rename_wheel $f; done;
              ANACONDA_ORG="scipy-wheels-nightly";
              pip install git+https://github.com/Anaconda-Server/anaconda-client;
              anaconda -t ${SCIPY_WHEELS_NIGHTLY_ACCESS} upload --force -u ${ANACONDA_ORG} ${TRAVIS_BUILD_DIR}/wheelhouse/*.whl;
        fi
        # for merges (push events) we use the staging area instead;
        # MULTIBUILD_WHEELS_STAGING_ACCESS is a secret token used in Travis
        # CI config, originally generated at anaconda.org for
        # multibuild-wheels-staging
        if [ "$TRAVIS_EVENT_TYPE" == "push" ]; then
              ANACONDA_ORG="multibuild-wheels-staging";
              pip install git+https://github.com/Anaconda-Server/anaconda-client;
              anaconda -t ${MULTIBUILD_WHEELS_STAGING_ACCESS} upload --force -u ${ANACONDA_ORG} ${TRAVIS_BUILD_DIR}/wheelhouse/*.whl;
        fi